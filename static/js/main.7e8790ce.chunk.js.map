{"version":3,"sources":["context/Context.js","components/Note.js","components/Notes.js","components/Form.js","pages/Home.js","pages/About.js","components/CustomNavbar.js","pages/More.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","Note","title","id","completed","useState","checked","setChecked","RemoveNote","useContext","cls","push","className","join","key","type","onChange","onClick","Notes","notes","map","note","Form","Date","now","setNotes","setNote","Provider","value","filter","placeholder","event","target","onKeyPress","arg","Home","About","class","CustomNavbar","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","Button","window","open","More","App","path","exact","component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7e8790ce.chunk.js","sourcesContent":["import React from \"react\";\nexport const Context = React.createContext();\n","import React, { useContext, useState } from \"react\";\nimport { Context } from \"../context/Context\";\nexport const Note = ({ title, id, completed }) => {\n  const [checked, setChecked] = useState(completed);\n  let options = {\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\",\n    hour: \"numeric\",\n    minute: \"numeric\",\n  };\n  const { RemoveNote } = useContext(Context);\n  const cls = [\"note\"];\n  if (checked) {\n    cls.push(\"completed\");\n  }\n  return (\n    <li className={\"list-group-item note \" + cls.join(\" \")} key={id}>\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={checked}\n          onChange={() => setChecked(!checked)}\n        />\n        <span>{title}</span>\n        <button\n          type=\"button\"\n          className=\"btn btn-outline-danger btn-sm\"\n          onClick={() => RemoveNote(id)}\n        >\n          Удалить\n        </button>\n      </label>\n    </li>\n  );\n};\n","import React, { useContext } from \"react\";\nimport { Context } from \"../context/Context\";\nimport { Note } from \"../components/Note\";\nexport const Notes = ({ notes }) => {\n  return (\n    <ul className=\"list-group\">\n      {notes.map((note) => (\n        <Note key={note.id} {...note} />\n      ))}\n    </ul>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Context } from \"../context/Context\";\nimport { Notes } from \"../components/Notes\";\n\nexport const Form = () => {\n  const [notes, setNotes] = useState([\n    {\n      id: Date.now(),\n      title: \"Какая-то заметка\",\n      completed: false,\n    },\n  ]);\n  const [note, setNote] = useState(\"\");\n  const RemoveNote = (id) => {\n    setNotes(\n      notes.filter((note) => {\n        return note.id !== id;\n      })\n    );\n  };\n\n  return (\n    <Context.Provider value={{ RemoveNote }}>\n      <div className=\"form-group\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          value={note}\n          placeholder=\"Введите и нажмите 'Enter'\"\n          onChange={(event) => setNote(event.target.value)}\n          onKeyPress={(arg) => {\n            if (arg.key === \"Enter\") {\n              setNotes([\n                ...notes,\n                { id: Date.now(), title: note, completed: false },\n              ]);\n              setNote(\"\");\n            }\n          }}\n        />\n      </div>\n\n      <Notes notes={notes} />\n    </Context.Provider>\n  );\n};\n","import React, { Fragment } from \"react\";\nimport { Form } from \"../components/Form\";\n\nexport const Home = () => {\n  return (\n    <Fragment>\n      <h1> Список дел </h1>\n      <Form />\n    </Fragment>\n  );\n};\n","import React from \"react\";\nexport const About = () => {\n  return (\n    <div className=\"jumbotron jumbotron-fluid\">\n      <div className=\"container\">\n        <h1 className=\"display-4\">О проекте</h1>\n        <p className=\"lead\">\n          Это упрощенный канвас, который на данный момент выполняет только одну\n          функцию - запись заметок. В дальнейшей перспективе сайт должен\n          упрощать учебный процесс.\n        </p>\n        <hr class=\"my-4\" />\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport { NavLink } from \"react-router-dom\";\nimport { Navbar, Nav, Button } from \"react-bootstrap\";\nexport const CustomNavbar = () => {\n  return (\n    <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n      <Navbar.Brand href=\"/todoappreact\">Почти канвас</Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n      <Navbar.Collapse id=\"responsive-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"/todoappreact/about\">О проекте</Nav.Link>\n          <Nav.Link href=\"/todoappreact/more\">Еще</Nav.Link>\n        </Nav>\n        <Nav>\n          <Button\n            variant=\"outline-success\"\n            onClick={() => window.open(\"https://t.me/funnyreal_bot\")}\n          >\n            Telegram Bot\n          </Button>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n};\n","import React, { Fragment } from \"react\";\nexport const More = () => {\n  return (\n    <Fragment>\n      <h1> Еще </h1>\n    </Fragment>\n  );\n};\n","import React from \"react\";\n\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { Home } from \"./pages/Home\";\nimport { About } from \"./pages/About\";\nimport { CustomNavbar } from \"./components/CustomNavbar\";\nimport { More } from \"./pages/More\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <CustomNavbar />\n\n      <div className=\"container\">\n        <Switch>\n          <Route path={\"/todoappreact\"} exact component={Home} />\n          <Route path={\"/todoappreact/about\"} component={About} />\n          <Route path={\"/todoappreact/more\"} component={More} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}