{"version":3,"sources":["firebase/firebaseContext.js","components/Note.js","components/Notes.js","components/Loader.js","components/Form.js","pages/Home.js","pages/About.js","components/CustomNavbar.js","firebase/firebaseReducer.js","types.js","firebase/firebaseState.js","App.js","serviceWorker.js","index.js"],"names":["FirebaseContext","createContext","Note","title","id","completed","removeNote","useContext","useState","checked","setChecked","cls","push","className","join","key","type","onChange","onClick","Notes","notes","map","note","Loader","role","Form","loading","fetchNotes","addNote","useEffect","setNote","value","placeholder","event","target","onKeyPress","arg","console","log","Home","About","class","CustomNavbar","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","Button","window","open","handlers","state","payload","filter","firebaseReducer","action","DEFAULT","url","process","FirebaseState","children","useReducer","dispatch","showLoader","a","axios","get","res","Object","keys","data","date","Date","toJSON","post","name","Error","message","delete","Provider","App","path","exact","component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.eca3d890.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nexport const FirebaseContext = createContext();\n","import React, { useContext, useState } from \"react\";\n//import { Context } from \"../context/Context\";\nimport { FirebaseContext } from \"../firebase/firebaseContext\";\n\nexport const Note = ({ title, id, completed }) => {\n  const { removeNote } = useContext(FirebaseContext);\n\n  const [checked, setChecked] = useState(completed);\n  // let options = {\n  //   year: \"numeric\",\n  //   month: \"long\",\n  //   day: \"numeric\",\n  //   hour: \"numeric\",\n  //   minute: \"numeric\",\n  // };\n  //const { RemoveNote } = useContext(Context);\n  const cls = [\"note\"];\n  if (checked) {\n    cls.push(\"completed\");\n  }\n  return (\n    <li className={\"list-group-item note \" + cls.join(\" \")} key={id}>\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={checked}\n          onChange={() => {\n            setChecked(!checked);\n            // completeNote(id);\n          }}\n        />\n        <span>{title}</span>\n        <button\n          type=\"button\"\n          className=\"btn btn-outline-danger btn-sm\"\n          onClick={() => removeNote(id)}\n        >\n          Удалить\n        </button>\n      </label>\n    </li>\n  );\n};\n","import React from \"react\";\nimport { Note } from \"../components/Note\";\nexport const Notes = ({ notes }) => {\n  return (\n    <ul className=\"list-group\">\n      {notes.map((note) => (\n        <Note key={note.id} {...note} />\n      ))}\n    </ul>\n  );\n};\n","import React from \"react\";\nexport const Loader = () => (\n  <div className=\"text-center\">\n    <div className=\"spinner-border\" role=\"status\">\n      <span className=\"sr-only\">Loading...</span>\n    </div>\n  </div>\n);\n","import React, { useState, useContext, useEffect } from \"react\";\n//import { Context } from \"../context/Context\";\nimport { Notes } from \"../components/Notes\";\nimport { FirebaseContext } from \"../firebase/firebaseContext\";\nimport { Loader } from \"../components/Loader\";\nexport const Form = () => {\n  const { loading, notes, fetchNotes, addNote } = useContext(FirebaseContext);\n  useEffect(() => {\n    fetchNotes();\n    // eslint-disable-next-line\n  }, []);\n  // const [notes, setNotes] = useState([\n  //   {\n  //     id: Date.now(),\n  //     title: \"Какая-то заметка\",\n  //     completed: false,\n  //   },\n  // ]);\n  const [note, setNote] = useState(\"\");\n  // const RemoveNote = (id) => {\n  //   setNotes(\n  //     notes.filter((note) => {\n  //       return note.id !== id;\n  //     })\n  //   );\n  // };\n\n  return (\n    //<Context.Provider value={{ RemoveNote }}>\n    <>\n      <div className=\"form-group\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          value={note}\n          placeholder=\"Введите и нажмите 'Enter'\"\n          onChange={(event) => setNote(event.target.value)}\n          onKeyPress={(arg) => {\n            if (arg.key === \"Enter\") {\n              // setNotes([\n              //   ...notes,\n              //   { id: Date.now(), title: note, completed: false },\n              // ]);\n              addNote(note);\n              setNote(\"\");\n              console.log(notes);\n            }\n          }}\n        />\n      </div>\n      {loading ? <Loader /> : <Notes notes={notes} />}\n    </>\n    //</Context.Provider>\n  );\n};\n","import React from \"react\";\nimport { Form } from \"../components/Form\";\n\nexport const Home = () => {\n  return (\n    <>\n      <h1> Список дел </h1>\n      <Form />\n    </>\n  );\n};\n","import React from \"react\";\nexport const About = () => {\n  return (\n    <div className=\"jumbotron jumbotron-fluid\">\n      <div className=\"container\">\n        <h1 className=\"display-4\">О проекте</h1>\n        <p className=\"lead\">\n          Это упрощенный канвас, который на данный момент выполняет только одну\n          функцию - запись заметок. В дальнейшей перспективе сайт должен\n          упрощать учебный процесс.\n        </p>\n        <hr class=\"my-4\" />\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport { Navbar, Nav, Button } from \"react-bootstrap\";\nexport const CustomNavbar = () => {\n  return (\n    <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n      <Navbar.Brand href=\"/todoappreact\">Почти канвас</Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n      <Navbar.Collapse id=\"responsive-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"/todoappreact/about\">О проекте</Nav.Link>\n        </Nav>\n        <Nav>\n          <Button\n            variant=\"outline-success\"\n            onClick={() => window.open(\"https://t.me/funnyreal_bot\")}\n          >\n            Telegram Bot\n          </Button>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n};\n","import {\n  ADD_NOTE,\n  FETCH_NOTES,\n  REMOVE_NOTE,\n  SHOW_LOADER,\n  //COMPLETE_NOTE,\n} from \"../types\";\n\nconst handlers = {\n  [SHOW_LOADER]: (state) => ({ ...state, loading: true }),\n  [ADD_NOTE]: (state, { payload }) => ({\n    ...state,\n    notes: [...state.notes, payload],\n  }),\n  [FETCH_NOTES]: (state, { payload }) => ({\n    ...state,\n    notes: payload,\n    loading: false,\n  }),\n  // [COMPLETE_NOTE]: (state, { payload }) => ({\n  //   ...state,\n  //   notes: state.notes.map((note) => note.id )\n  // }),\n  [REMOVE_NOTE]: (state, { payload }) => ({\n    ...state,\n    notes: state.notes.filter((note) => note.id !== payload),\n  }),\n  DEFAULT: (state) => state,\n};\n\nexport const firebaseReducer = (state, action) => {\n  const handle = handlers[action.type] || handlers.DEFAULT;\n  return handle(state, action);\n};\n","export const SHOW_LOADER = \"SHOW_LOADER\";\nexport const ADD_NOTE = \"ADD_NOTE\";\nexport const FETCH_NOTES = \"FETCH_NOTES\";\nexport const REMOVE_NOTE = \"REMOVE_NOTE\";\nexport const COMPLETE_NOTE = \"COMPLETE_NOTE\";\n","import React, { useReducer } from \"react\";\nimport axios from \"axios\";\nimport { FirebaseContext } from \"./firebaseContext\";\nimport { firebaseReducer } from \"./firebaseReducer\";\nimport {\n  ADD_NOTE,\n  FETCH_NOTES,\n  REMOVE_NOTE,\n  SHOW_LOADER,\n  // COMPLETE_NOTE,\n} from \"../types\";\n\nconst url = process.env.REACT_APP_DB_URL;\n\nexport const FirebaseState = ({ children }) => {\n  const initialState = {\n    notes: [],\n    loading: false,\n  };\n  const [state, dispatch] = useReducer(firebaseReducer, initialState);\n\n  const showLoader = () => dispatch({ type: SHOW_LOADER });\n\n  const fetchNotes = async () => {\n    showLoader();\n    const res = await axios.get(`${url}/notes.json`);\n\n    const payload = Object.keys(res.data).map((key) => {\n      return {\n        ...res.data[key],\n        id: key,\n      };\n    });\n\n    dispatch({ type: FETCH_NOTES, payload });\n  };\n\n  const addNote = async (title) => {\n    const note = {\n      title,\n      date: new Date().toJSON(),\n      completed: false,\n    };\n\n    try {\n      const res = await axios.post(`${url}/notes.json`, note);\n      const payload = {\n        ...note,\n        id: res.data.name,\n      };\n\n      dispatch({ type: ADD_NOTE, payload });\n    } catch (e) {\n      throw new Error(e.message);\n    }\n  };\n\n  const removeNote = async (id) => {\n    await axios.delete(`${url}/notes/${id}.json`);\n\n    dispatch({\n      type: REMOVE_NOTE,\n      payload: id,\n    });\n  };\n  // const completeNote = async (id) => {\n  //   const res = await axios.get(`${url}/notes/${id}.json`);\n  //   res.completed = !res.completed;\n  //   await axios.delete(`${url}/notes/${id}.json`);\n  //   await axios.post(`${url}/notes.json`, res);\n  //   dispatch({ type: COMPLETE_NOTE, payload: id });\n  // };\n\n  return (\n    <FirebaseContext.Provider\n      value={{\n        showLoader,\n        addNote,\n        removeNote,\n        fetchNotes,\n        //     completeNote,\n        loading: state.loading,\n        notes: state.notes,\n      }}\n    >\n      {children}\n    </FirebaseContext.Provider>\n  );\n};\n","import React from \"react\";\n\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { Home } from \"./pages/Home\";\nimport { About } from \"./pages/About\";\nimport { CustomNavbar } from \"./components/CustomNavbar\";\nimport { FirebaseState } from \"./firebase/firebaseState\";\nfunction App() {\n  return (\n    <FirebaseState>\n      <BrowserRouter>\n        <CustomNavbar />\n\n        <div className=\"container\">\n          <Switch>\n            <Route path={\"/todoappreact\"} exact component={Home} />\n            <Route path={\"/todoappreact/about\"} component={About} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    </FirebaseState>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}